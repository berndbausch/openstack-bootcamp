######################################################################
                         VM setup
- 2 CPUs, 8GB RAM or more
- 2 NICs, same bridge OK?
- 50GB root
- Three Swift disks, 50GB
- One Cinder disk, 50GB

ubuntu20-base.qcow2 below contains an installed Ubuntu 20.04.
######################################################################

qemu-img create -f qcow2 -b ubuntu20-base.qcow2 kolla.qcow2  # root disk
qemu-img create -f qcow2 kolla-cinder.qcow2 50
qemu-img create -f qcow2 kolla-swift1.qcow2 50
qemu-img create -f qcow2 kolla-swift2.qcow2 50
qemu-img create -f qcow2 kolla-swift3.qcow2 50

virt-install --cpu host --name kolla --ram $((8*1024)) --vcpus 2 --graphics vnc,listen=0.0.0.0  \
             --network bridge=br1 --network bridge=br1    \
             --import                                     \
             --disk kolla.qcow2,bus=scsi           \
             --disk kolla-swift1.qcow2,bus=scsi    \
             --disk kolla-swift2.qcow2,bus=scsi    \
             --disk kolla-swift3.qcow2,bus=scsi    \
             --disk kolla-cinder.qcow2,bus=scsi    

######################################################################
     PREPARE
######################################################################

sudo apt install python3-dev libffi-dev gcc libssl-dev -y

# make venv
sudo apt install python3-venv -y
python3 -m venv ~/venv
source ~/venv/bin/activate
echo source ~/venv/bin/activate >> .bashrc

# update pip and install the correct version of Ansible
# the docs say "ansible<3", but this didn't work with the version of 
# kolla-ansible on Pypi at the time I am writing this.
pip install -U pip
pip install 'ansible<2.10'  

# install and configure Kolla-Ansible
pip install kolla-ansible
sudo mkdir /etc/kolla
sudo chown $USER:$USER /etc/kolla
cp -r ~/venv/share/kolla-ansible/etc_examples/kolla/* /etc/kolla
cp ~/venv/share/kolla-ansible/ansible/inventory/* .

# Ansible config
sudo mkdir /etc/ansible
cat <<EOF | sudo tee /etc/ansible/ansible.cfg
[defaults]
host_key_checking=False
pipelining=True
forks=100
EOF

# create passwords in /etc/kolla/passwords.yml
kolla-genpwd

######################################################################
                      globals.yml
######################################################################
kolla_base_distro: "ubuntu"

network_interface: "ens3"
neutron_external_interface: "ens4"
kolla_internal_vip_address: "192.168.1.250"
neutron_plugin_agent: "ovn"

# I want Swift-backed Glance and Cinder-backup
enable_swift: "yes"
enable_cinder: "yes"
enable_cinder_backup: "yes"
enable_cinder_backend_lvm: "yes"
glance_backend_swift: "yes"
cinder_backup_driver: "swift"

enable_octavia: "yes"

octavia_certs_country: FAVORITE_COUNTRY
octavia_certs_state: FAVORITE_STATE
octavia_certs_organization: THE_ORG
octavia_certs_organizational_unit: THE_UNIT

####################################################################
       First step installing necessary software incl Docker
####################################################################

kolla-ansible -i all-in-one bootstrap-servers    

####################################################################
                   Create Swift rings
####################################################################
Swift requires manually setting up the disks and the rings
https://docs.openstack.org/kolla-ansible/latest/reference/storage/swift-guide.html
To understand the ring builder:
- https://docs.openstack.org/swift/latest/admin/objectstorage-ringbuilder.html
- https://docs.openstack.org/swift/latest/install/initial-rings.html

Steps:
1- create partitions on three disks, put XFS filesystems on them
2- use swift-ring-builder in Docker image to create object builder 
3- add the filesystems to the object ring
4- do all of the above for the account and container rings
5- rebalance

##### 1- create partitions on three disks, put XFS filesystems on them

index=0
for i in b c d
do 
    sudo parted -s /dev/sd$i mklabel gpt mkpart KOLLA_SWIFT_DATA 1 100%
    sudo mkfs -t xfs -L d${index} /dev/sd${i}1
    ((index++))
done

##### 2- use swift-ring-builder in Docker image to create object builder 
# https://docs.openstack.org/swift/latest/deployment_guide.html:
# swift-ring-builder <builder_file> create <part_power> <replicas> <min_part_hours>
# <min_part_hours> is the time in hours before a specific partition can be moved

KOLLA_SWIFT_BASE_IMAGE="kolla/ubuntu-source-swift-base:4.0.0"
mkdir -p /etc/kolla/config/swift
sudo docker run --rm -v /etc/kolla/config/swift/:/etc/kolla/config/swift/ \
                $KOLLA_SWIFT_BASE_IMAGE swift-ring-builder \
                /etc/kolla/config/swift/object.builder create 10 3 1

##### 3- add disks to the object ring
# swift-ring-builder <builder_file> add r<region>z<zone>-<ip>:<port>/<device_name>_<meta> <weight>
# It seems that labels are accepted as device names. Below: Labels d0, d1 and d2.

# the docs use three storage nodes. Since this is all-in-one, we use one.
STORAGE_NODES=(192.168.1.208)
for node in ${STORAGE_NODES[@]}
do for i in {0..2}
   do sudo docker run --rm -v /etc/kolla/config/swift/:/etc/kolla/config/swift/ \
      $KOLLA_SWIFT_BASE_IMAGE swift-ring-builder                                \
      /etc/kolla/config/swift/object.builder add r1z1-${node}:6000/d${i} 1
   done
done

##### 4- repeat steps 2 and 3 for the account and container rings
#####    using ports 6001 for account, 6002 for container

##### 5- rebalance
#####    This creates the rings
for ring in object account container 
do sudo docker run --rm -v /etc/kolla/config/swift/:/etc/kolla/config/swift/ \
                   $KOLLA_SWIFT_BASE_IMAGE swift-ring-builder                \
                   /etc/kolla/config/swift/${ring}.builder rebalance
done

####################################################################
                   Cinder LVM setup 
####################################################################
parted /dev/sde mklabel gpt mkpart KOLLA_CINDER_DATA 1 100%
pvcreate /dev/sde1
vgcreate cinder-volumes /dev/sde1

####################################################################
                    Octavia certificates
####################################################################
Automatic generation documented at https://docs.openstack.org/kolla-ansible/latest/reference/networking/octavia.html#option-1-automatically-generating-certificates
Need to:
   1- put certificate description in global.yml
        octavia_certs_country: FAVORITE_COUNTRY
        octavia_certs_state: FAVORITE_STATE
        octavia_certs_organization: THE_ORG
        octavia_certs_organizational_unit: THE_UNIT

   2- run sudo chmod 777 /etc/kolla /etc/kolla/config; kolla-ansible octavia-certificates

**Problem**: I lack write permissions on /etc/kolla; it's owned by kolla:kolla,
with permissions 755. Setting them to 777 makes the command run through,
but I am not sure if this is the right approach.
In contrast to the documentation, certificates are created under
/etc/kolla/octavia-certificates.

####################################################################
                   Set up the cloud
####################################################################

>>>> Ansible log is at /var/log/kolla/ansible.log <<<<

# The bootstrap-servers step was done before creating Swift rings
# kolla-ansible -i all-in-one bootstrap-servers    # 5 minutes
kolla-ansible -i all-in-one prechecks
kolla-ansible -i all-in-one deploy

####################################################################
                   First steps in the cloud
####################################################################

pip install python-openstackclient   # doc says "python3-openstackclient"
kolla-ansible post-deploy            # create adminrc with correct password
. /etc/kolla/admin-openrc.sh

# Script to set up a few initial resources
# Can be configured with these environment variables:
KOLLA_DEBUG=${KOLLA_DEBUG:-0}
ENABLE_EXT_NET=${ENABLE_EXT_NET:-1}
EXT_NET_CIDR=${EXT_NET_CIDR:-'10.0.2.0/24'}
EXT_NET_RANGE=${EXT_NET_RANGE:-'start=10.0.2.150,end=10.0.2.199'}
EXT_NET_GATEWAY=${EXT_NET_GATEWAY:-'10.0.2.1'}

./venv/share/kolla-ansible/init-runonce

# This script downloads a cirros image and registers it.  Then it configures
# networking and nova quotas to allow 40 m1.small instances to be created.
